unit FrmSeleccionarEmpresa01;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils,
  System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ComCtrls, RzTabs,
  Vcl.Buttons, Vcl.ExtCtrls, RzPanel;

type
  TFormSeleccionarEmpresa01 = class(TForm)
    pnlTitulo: TRzPanel;
    pnlOpciones: TRzPanel;
    btnAceptar: TBitBtn;
    btnCancelar: TBitBtn;
    pgcCampos: TRzPageControl;
    TabSheet1: TRzTabSheet;
    Label1: TLabel;
    cbEmpresas: TComboBoxEx;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnAceptarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
  private
    FArchivo: string;
  public
    property _Archivo: string  read FArchivo write FArchivo;
  end;

var
  FormSeleccionarEmpresa01: TFormSeleccionarEmpresa01;

  procedure InicializarForma;
  procedure FinalizarForma;
  procedure KeyDownForma(var Key: Word; Shift: TShiftState);
  procedure LimpiarCampos;
  procedure Aceptar;
  procedure Cancelar;
  procedure LlenarcbEmpresas(cb: TComboBoxEx);
  procedure CargarIdioma;

implementation
uses
  uSistema, ufunciones, uConfig, udmLenguajes;

{$R *.dfm}

var
  Forma01: TFormSeleccionarEmpresa01;

{$REGION 'Funciones Forma'}
procedure TFormSeleccionarEmpresa01.FormShow(Sender: TObject);
begin
  Forma01 := FormSeleccionarEmpresa01;

  InicializarForma;
end;

procedure TFormSeleccionarEmpresa01.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FinalizarForma;
end;

procedure TFormSeleccionarEmpresa01.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  KeyDownForma(Key, Shift);
end;

procedure TFormSeleccionarEmpresa01.btnAceptarClick(Sender: TObject);
begin
  Aceptar;
end;

procedure TFormSeleccionarEmpresa01.btnCancelarClick(Sender: TObject);
begin
  Cancelar;
end;
{$ENDREGION}

{$REGION 'Funciones Generales'}
procedure InicializarForma;
begin
  with Forma01 do
  begin

    try
      Tag := 0;

      LlenarcbEmpresas(cbEmpresas);
      LimpiarCampos;
      CargarIdioma;

      cbEmpresas.SetFocus;
    except
      if _Resultado = -1 then
      begin
        Application.MessageBox(PChar('Ha ocurrido un error' + #13+#10 + _ErrorM),
          'Error', MB_ICONERROR);
        PostMessage(Handle, WM_CLOSE, 0, 0);
      end;
      _Resultado := -1;
    end;

  end;
end;

procedure FinalizarForma;
begin
  with Forma01 do
  begin

    try

    except
    end;

  end;
end;

procedure KeyDownForma(var Key: Word; Shift: TShiftState);
begin
  with Forma01 do
  begin

    if Key = VK_ESCAPE then
    begin
      Key := 0;
      Close;
    end;
    if Key = VK_F10 then
    begin
      Key := 0;
      btnAceptar.Click;
    end;
    if Key = VK_F11 then
    begin
      Key := 0;
      btnCancelar.Click;
    end;

  end;
end;

procedure LimpiarCampos;
begin
  with Forma01 do
  begin

    cbEmpresas.ItemIndex := 0;

  end;
end;

procedure Aceptar;
var
  mArchivo: TStringList;
begin
  with Forma01 do
  begin

    mArchivo := TStringList.Create;
    mArchivo := TStringList(cbEmpresas.Items.Objects[cbEmpresas.ItemIndex]);
    _Archivo := mArchivo.Strings[0];
    mArchivo.Free;
    Tag := 1;
    Close;

  end;
end;

procedure Cancelar;
begin
  with Forma01 do
  begin

    Close;

  end;
end;

procedure LlenarcbEmpresas(cb: TComboBoxEx);
var
  mConfig: TConfig;
  mLista, mValores, mCadena: TStringList;
  mFila: Integer;
  mNombre, mDirectorio: string;
begin
  with Forma01 do
  begin

    cb.Items.Clear;

    mConfig := TConfig.Create;
    mLista := TStringList.Create;
    mConfig.LeerEmpresas(mLista);
    mConfig.Free;

    for mFila := 0 to mLista.Count - 1 do
    begin
      mValores := TStringList.Create;
      ExtractStrings(['='], ['='], PChar(mLista.Strings[mFila]), mValores);
      mNombre := Extractfilename(mValores.Strings[1]);
      mNombre := Copy(mNombre, 1, Pos('.', mNombre) - 1);
      mDirectorio := ExtractFileDir(mValores.Strings[1]);
      mValores.Free;
      mCadena := TStringList.Create;
      mCadena.Clear;
      mCadena.Add(mValores.Strings[1]);
      cb.Items.AddObject(mNombre, TObject(mCadena));
    end;
    mLista.Free;

  end;
end;

procedure CargarIdioma;
var
  mValor: string;
  mCount, mLen: Integer;
begin
  with Forma01 do
  begin

    for mCount := 0 to Forma01.ComponentCount - 1 do
    begin
      if Forma01.Components[mCount] is TLabel then
      begin
        mValor := TLabel(Forma01.Components[mCount]).Caption;
        mLen := Length(mValor);
        if mValor[mLen] = ':' then
          mValor := Copy(mValor, 1, mLen - 1);
        mValor := dmLenguajes.GetValue(mValor);
        if Trim(mValor) <> '' then
          TLabel(Forma01.Components[mCount]).Caption := mValor;
      end;
      if Forma01.Components[mCount] is TBitBtn then
      begin
        mValor := TBitBtn(Forma01.Components[mCount]).Caption;
        mValor := dmLenguajes.GetValue(mValor);
        if Trim(mValor) <> '' then
          TBitBtn(Forma01.Components[mCount]).Caption := mValor;
      end;
      if Forma01.Components[mCount] is TRzPanel then
      begin
        mValor := TRzPanel(Forma01.Components[mCount]).Caption;
        mValor := dmLenguajes.GetValue(mValor);
        if Trim(mValor) <> '' then
          TRzPanel(Forma01.Components[mCount]).Caption := mValor;
      end;
      if Forma01.Components[mCount] is TRzTabSheet then
      begin
        mValor := TRzTabSheet(Forma01.Components[mCount]).Caption;
        mValor := dmLenguajes.GetValue(mValor);
        if Trim(mValor) <> '' then
          TRzTabSheet(Forma01.Components[mCount]).Caption := mValor;
      end;
    end;

  end;
end;
{$ENDREGION}

end.
