unit FrmMovimientoInventario01;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils,
  System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  RzPanel, Vcl.Mask, RxToolEdit, RxCurrEdit;

type
  TFormMovimientoInventario01 = class(TForm)
    pnlTitulo: TRzPanel;
    pnlOpciones: TRzPanel;
    btnAceptar: TBitBtn;
    btnCancelar: TBitBtn;
    Label2: TLabel;
    CurrencyEdit1: TCurrencyEdit;
    Label1: TLabel;
    RadioButton1: TRadioButton;
    RadioButton2: TRadioButton;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnAceptarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormMovimientoInventario01: TFormMovimientoInventario01;

  procedure InicializarForma;
  procedure FinalizarForma;
  procedure KeyDownForma(var Key: Word; Shift: TShiftState);
  procedure LimpiarCampos;
  procedure Aceptar;
  procedure Cancelar;
  procedure CamposValidos;

implementation
uses
  uSistema, ufunciones;

{$R *.dfm}

var
  Forma01: TFormMovimientoInventario01;

{$REGION 'Funciones Forma'}
procedure TFormMovimientoInventario01.FormShow(Sender: TObject);
begin
  Forma01 := FormMovimientoInventario01;

  InicializarForma;
end;

procedure TFormMovimientoInventario01.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FinalizarForma;
end;

procedure TFormMovimientoInventario01.FormKeyDown(Sender: TObject;
  var Key: Word; Shift: TShiftState);
begin
  KeyDownForma(Key, Shift);
end;

procedure TFormMovimientoInventario01.btnAceptarClick(Sender: TObject);
begin
  Aceptar;
end;

procedure TFormMovimientoInventario01.btnCancelarClick(Sender: TObject);
begin
  Cancelar;
end;
{$ENDREGION}

{$REGION 'Funciones Generales'}
procedure InicializarForma;
begin
  with Forma01 do
  begin

    try
      Tag := 0;

      LimpiarCampos;
      edtUsuario.SetFocus;
    except
    end;

  end;
end;

procedure FinalizarForma;
begin
  with Forma01 do
  begin

    try

    except
    end;

  end;
end;

procedure KeyDownForma(var Key: Word; Shift: TShiftState);
begin
  with Forma01 do
  begin

    if Key = VK_ESCAPE then
    begin
      Key := 0;
      Close;
    end;
    if Key = VK_F10 then
    begin
      Key := 0;
      btnAceptar.Click;
    end;
    if Key = VK_F11 then
    begin
      Key := 0;
      btnCancelar.Click;
    end;

  end;
end;

procedure LimpiarCampos;
begin
  with Forma01 do
  begin

    edtUsuario.Clear;
    edtClave.Clear;

  end;
end;

procedure Aceptar;
begin
  with Forma01 do
  begin

    CamposValidos;
    if _Resultado = 1 then
    begin
      Tag := 1;
      Close;
    end;
    if _Resultado = 0 then
    begin
      Application.MessageBox(PChar('El usuario o la clave son incorrectos'),
        'Error', MB_ICONERROR);
      edtUsuario.SetFocus;
    end;

  end;
end;

procedure Cancelar;
begin
  with Forma01 do
  begin

    Close;

  end;
end;

procedure CamposValidos;
var
  mDL_TB_USUARIOS: TDL_TB_USUARIOS;
  mWhere: TStringList;
  mUsuario, mClave: string;
  mUsuarioDB, mClaveDB, mClaveDB1: string;
begin
  with Forma01 do
  begin

    try
      _Resultado := 0;

      mUsuario := Trim(edtUsuario.Text);
      mClave := Trim(edtClave.Text);
      mUsuario := UpperCase(mUsuario);
      mClave := UpperCase(mClave);
//      mClave := StringToHex(mClave);

      mWhere := TStringList.Create;
      mDL_TB_USUARIOS := TDL_TB_USUARIOS.Create;
      mDL_TB_USUARIOS.Consultar(_Resultado, _ErrorM, mWhere.Text);
      mWhere.Free;
      if _Resultado = -1 then
        raise Exception.Create('');
      _Resultado := 0;
      with mDL_TB_USUARIOS.Dataset do
      begin
        First;
        while not Eof do
        begin
          mUsuarioDB := Trim(
            FieldByName('USUARIO').AsString);
          mUsuarioDB := UpperCase(mUsuarioDB);
          mClaveDB :=
            FieldByName('CLAVE').AsString;
          mClaveDB1 := HexToString(mClaveDB);
          mClaveDB := UpperCase(mClaveDB1);
          if (mUsuarioDB = mUsuario) and
            (mClaveDB = mClave) then
          begin
            _Resultado := 1;
            Break;
          end;
          Next;
        end;
      end;
      mDL_TB_USUARIOS.Destroy;
    except
      if _Resultado = -1 then
      begin
        Application.MessageBox(PChar('Ha ocurrido un error' + #13+#10 + _ErrorM),
          'Error', MB_ICONERROR);
      end;
      _Resultado := -1;
    end;
    edtUsuario.SetFocus;

  end;
end;
{$ENDREGION}

end.
