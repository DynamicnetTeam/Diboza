unit RptEstadoCuenta01;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  frxClass, frxDBSet, Vcl.StdCtrls, Vcl.Buttons, Vcl.ComCtrls, Vcl.ExtCtrls,
  RzPanel, System.DateUtils;

type
  TReptEstadoCuenta01 = class(TForm)
    pnlTitulo: TRzPanel;
    pnlCampos: TRzPanel;
    GroupBox2: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    dtpFechaDesde: TDateTimePicker;
    dtpFechaHasta: TDateTimePicker;
    pnlOpciones: TRzPanel;
    btnAceptar: TBitBtn;
    btnCancelar: TBitBtn;
    frxReport1: TfrxReport;
    frxDBDataset1: TfrxDBDataset;
    FDMemTable1: TFDMemTable;
    Label14: TLabel;
    cbCliente: TComboBoxEx;
    btnBuscar_Clientes: TBitBtn;
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnAceptarClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnBuscar_ClientesClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  ReptEstadoCuenta01: TReptEstadoCuenta01;

  procedure InicializarForma;
  procedure FinalizarForma;
  procedure KeyDownForma(var Key: Word; Shift: TShiftState);
  procedure LimpiarCampos;
  procedure Aceptar;
  procedure Cancelar;
  procedure Construir_Reporte;
  procedure LlenarcbClientes(cb: TComboBoxEx);

implementation

uses
  uSistema, ufunciones, uDL_TB_FACTURASCLIENTESENCABEZADO,
  uDL_TB_FACTURASCLIENTESDETALLE, BS_DBConexion, DL_DBGeneral,
  uDL_TB_CLIENTES, FrmMantenimientoClientes01;

{$R *.dfm}

var
  Forma01: TReptEstadoCuenta01;

{$REGION 'Funciones Forma'}
procedure TReptEstadoCuenta01.FormShow(Sender: TObject);
begin
  Forma01 := ReptEstadoCuenta01;

  InicializarForma;
end;

procedure TReptEstadoCuenta01.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FinalizarForma;
end;

procedure TReptEstadoCuenta01.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  KeyDownForma(Key, Shift);
end;

procedure TReptEstadoCuenta01.btnAceptarClick(Sender: TObject);
begin
  Aceptar;
end;

procedure TReptEstadoCuenta01.btnCancelarClick(Sender: TObject);
begin
  Cancelar;
end;

procedure TReptEstadoCuenta01.btnBuscar_ClientesClick(Sender: TObject);
begin
  FormMantenimientoClientes01.ShowModal;
  LlenarcbClientes(cbCliente);
end;
{$ENDREGION}

{$REGION 'Funciones Generales'}
procedure InicializarForma;
begin
  with Forma01 do
  begin

    try
      Tag := 0;

      LlenarcbClientes(cbCliente);
      if _Resultado = -1 then
        raise Exception.Create('');

      LimpiarCampos;
    except
      if _Resultado = -1 then
      begin
        Application.MessageBox(PChar('Ha ocurrido un error' + #13+#10 + _ErrorM),
          'Error', MB_ICONERROR);
        PostMessage(Handle, WM_CLOSE, 0, 0);
      end;
      _Resultado := -1;
    end;

  end;
end;

procedure FinalizarForma;
begin
  with Forma01 do
  begin

    try

    except
    end;

  end;
end;

procedure KeyDownForma(var Key: Word; Shift: TShiftState);
begin
  with Forma01 do
  begin

    if Key = VK_ESCAPE then
    begin
      Key := 0;
      Close;
    end;
    if Key = VK_F10 then
    begin
      Key := 0;
      btnAceptar.Click;
    end;
    if Key = VK_F11 then
    begin
      Key := 0;
      btnCancelar.Click;
    end;

  end;
end;

procedure LimpiarCampos;
begin
  with Forma01 do
  begin

    FDMemTable1.Open;
    dtpFechaDesde.Date := Date;
    dtpFechaHasta.Date := Date;
    cbCliente.ItemIndex := 0;

  end;
end;

procedure Aceptar;
begin
  with Forma01 do
  begin

    Construir_Reporte;
    if _Resultado = 1 then
    begin
      frxDBDataset1.Enabled := True;
      frxReport1.ShowReport();
      frxDBDataset1.Enabled := False;
    end
    else
      Application.MessageBox(PChar('Ha ocurrido un error' + #13+#10 + _ErrorM),
        'Error', MB_ICONERROR);

  end;
end;

procedure Cancelar;
begin
  with Forma01 do
  begin

    Close;

  end;
end;

procedure Construir_Reporte;
var
  mDL_TB_FACTURASCLIENTESENCABEZADO: TDL_TB_FACTURASCLIENTESENCABEZADO;
  mDL_TB_FACTURASCLIENTESDETALLE: TDL_TB_FACTURASCLIENTESDETALLE;
  mDL_TB_CLIENTES: TDL_TB_CLIENTES;
  mWhere1, mWhere2, mOrderBy1: TStringList;
  mWhere, mOrderBy: TStringList;
  mSaldoFecha, mSaldo, mDebito, mCredito: Double;
  mFechaDesde, mFechaHasta, mFechaDesde2: TDateTime;
  mIdCliente, mIdDocumento, mLen: Integer;
  mDocumentos, mNombreCliente: string;
begin
  with Forma01 do
  begin

    try
      _Resultado := 1;

      FDMemTable1.Open;
      FDMemTable1.EmptyDataSet;

      mWhere1 := TStringList.Create;
      if cbCliente.ItemIndex > 0 then
        mWhere1.Add('A.Id=' + IntToStr(GetCombo(cbCliente)));
      mOrderBy1 := TStringList.Create;
      mOrderBy1.Add('A.NOMBRECOMPLETO');
      mDL_TB_CLIENTES := TDL_TB_CLIENTES.Create;
      mDL_TB_CLIENTES.Consultar(_Resultado, _ErrorM,
        mWhere1.Text, mOrderBy1.Text);
      mWhere1.Free;
      mOrderBy1.Free;
      if _Resultado = -1 then
        raise Exception.Create('');

      with mDL_TB_CLIENTES.Dataset do
      begin
        First;
        while not Eof do
        begin
          mIdCliente :=
            FieldByName('Id').AsInteger;
          mNombreCliente :=
            FieldByName('NOMBRECOMPLETO').AsString;

          mFechaDesde := StrToDate('01/01/2000');
          mFechaHasta := IncDay(dtpFechaDesde.Date, - 1);
          mFechaDesde2 := dtpFechaDesde.Date;

          mWhere := TStringList.Create;
          mWhere.Add('(Fecha >= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', mFechaDesde)));
          mWhere.Add(' And ');
          mWhere.Add('Fecha <= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', mFechaHasta)) + ')');
          mWhere.Add(' And ');
          mWhere.Add('(CODIGOFORMAPAGO=5)');
          mWhere.Add(' And ');
          mWhere.Add('(CODIGOESTADO = 4)');
          mWhere.Add(' And ');
          mWhere.Add('(IdCliente =' + IntToStr(mIdCliente) + ')');
          mDL_TB_FACTURASCLIENTESENCABEZADO := TDL_TB_FACTURASCLIENTESENCABEZADO.Create;
          mSaldoFecha :=
            mDL_TB_FACTURASCLIENTESENCABEZADO.Obtener_SaldoFecha(mWhere.Text,
              _Resultado, _ErrorM);
          mWhere.Free;
          if _Resultado = -1 then
            raise Exception.Create('');
          mDL_TB_FACTURASCLIENTESENCABEZADO.Destroy;

          mDocumentos := '';
          mWhere := TStringList.Create;
          mWhere.Add('(Fecha >= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', mFechaDesde2)));
          mWhere.Add(' And ');
          mWhere.Add('Fecha <= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', Date)) + ')');
          mWhere.Add(' And ');
          mWhere.Add('(CODIGOFORMAPAGO=5)');
          mWhere.Add(' And ');
          mWhere.Add('(CODIGOESTADO = 4)');
          mWhere.Add(' And ');
          mWhere.Add('(IdCliente =' + IntToStr(mIdCliente) + ')');
          mDL_TB_FACTURASCLIENTESENCABEZADO := TDL_TB_FACTURASCLIENTESENCABEZADO.Create;
          mDL_TB_FACTURASCLIENTESENCABEZADO.Consultar(_Resultado, _ErrorM,
            mWhere.Text);
          mWhere.Free;
          if _Resultado = -1 then
            raise Exception.Create('');
          mDL_TB_FACTURASCLIENTESENCABEZADO.Dataset.First;
          while not mDL_TB_FACTURASCLIENTESENCABEZADO.Dataset.Eof do
          begin
            mDocumentos := mDocumentos +
              mDL_TB_FACTURASCLIENTESENCABEZADO.Dataset.FieldByName('Id').AsString + ',';
            mDL_TB_FACTURASCLIENTESENCABEZADO.Dataset.Next;
          end;
          mDL_TB_FACTURASCLIENTESENCABEZADO.Destroy;
          if mDocumentos <> '' then
          begin
            mLen := Length(mDocumentos);
            if mDocumentos[mLen] = ',' then
              mDocumentos := Copy(mDocumentos, 1, mLen - 1);
            mDocumentos := ' And A.Numero in (' + mDocumentos + ')';
          end;

          mWhere := TStringList.Create;
          mWhere2 := TStringList.Create;
          mWhere2.Add('(Fecha >= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', dtpFechaDesde.Date)));
          mWhere2.Add(' And ');
          mWhere2.Add('Fecha <= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', Date)) + ')');
          mWhere2.Add(' And ');
          mWhere2.Add('(A.IdCliente =' + IntToStr(mIdCliente) + ')');
          mWhere.Add('(Fecha >= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', dtpFechaDesde.Date)));
          mWhere.Add(' And ');
          mWhere.Add('Fecha <= ' + QuotedStr(FormatDateTime('yyyy-MM-dd', Date)) + ')');
          mWhere.Add(' And ');
          mWhere.Add('(A.IdCliente =' + IntToStr(mIdCliente) + ')');
          mWhere.Add(' And ');
          mWhere.Add('(A.CODIGOFORMAPAGO=5)');
          mWhere.Add(' And ');
          mWhere.Add('(A.CODIGOESTADO = 4)');
          mWhere.Add(mDocumentos);
          mDL_TB_FACTURASCLIENTESDETALLE := TDL_TB_FACTURASCLIENTESDETALLE.Create;
          mDL_TB_FACTURASCLIENTESDETALLE.Dataset.EmptyDataSet;
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.EmptyDataSet;
          mDL_TB_FACTURASCLIENTESDETALLE.Obtener_Detalle(mWhere2.Text, mWhere.Text,
            mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta, _Resultado, _ErrorM);
          mWhere.Free;
          mWhere2.Free;
          if _Resultado = -1 then
            raise Exception.Create('');
          mSaldo := mSaldoFecha;

//          FDMemTable1.EmptyDataSet;
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.IndexesActive := False;
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.IndexFieldNames := 'Fecha;Tipo';
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.IndexesActive := True;
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.First;
          while not mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.Eof do
          begin
            FDMemTable1.Append;
            FDMemTable1.FieldByName('IdCliente').AsInteger :=
              mIdCliente;
            FDMemTable1.FieldByName('Fecha').AsString :=
              FormatDateTime('dd/MM/yyyy',
              mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Fecha').AsDateTime);
            FDMemTable1.FieldByName('Numero').AsInteger :=
              mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Numero').AsInteger;
            FDMemTable1.FieldByName('Detalle').AsString :=
              mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Detalle').AsString;
            FDMemTable1.FieldByName('Cantidad').AsFloat :=
              mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Cantidad').AsFloat;
            mDebito := 0;
            mCredito := 0;
            if mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Tipo').AsInteger = 1 then
            begin
              FDMemTable1.FieldByName('Debito').AsFloat :=
                mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Total').AsFloat;
              FDMemTable1.FieldByName('Credito').AsFloat := 0;
              mDebito := mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Total').AsFloat;
            end;
            if mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Tipo').AsInteger = 2 then
            begin
              FDMemTable1.FieldByName('Debito').AsFloat := 0;
              FDMemTable1.FieldByName('Credito').AsFloat :=
                mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Total').AsFloat;
              mCredito := mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.FieldByName('Total').AsFloat;
            end;
            mSaldo := mSaldo + mDebito - mCredito;
            FDMemTable1.FieldByName('Saldo').AsFloat := mSaldo;
            FDMemTable1.FieldByName('NombreCliente').AsString :=
              mNombreCliente;
            FDMemTable1.Post;

            mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.Next;
          end;
          mDL_TB_FACTURASCLIENTESDETALLE.DatasetEstadoCuenta.IndexesActive := False;

          mDL_TB_FACTURASCLIENTESDETALLE.Destroy;

          Next;
        end; // while not Eof do
      end; // with mDL_TB_CLIENTES.Dataset do
      mDL_TB_CLIENTES.Destroy;

      _Resultado := 1;
    except
      _Resultado := -1;
    end;

  end;
end;

procedure LlenarcbClientes(cb: TComboBoxEx);
var
  mDL_TB_Clientes: TDL_TB_CLIENTES;
  mWhere, mOrderBy: TStringList;
begin
  with Forma01 do
  begin

    try
      _Resultado := 1;

      cb.Items.Clear;
      cb.Items.AddObject('[TODOS]', TObject(0));

      mWhere := TStringList.Create;
      mOrderBy := TStringList.Create;
      mOrderBy.Add('A.NOMBRECOMPLETO');
      mDL_TB_Clientes := TDL_TB_CLIENTES.Create;
      mDL_TB_Clientes.Consultar(_Resultado, _ErrorM,
        mWhere.Text, mOrderBy.Text);
      mWhere.Free;
      mOrderBy.Free;
      with mDL_TB_Clientes.Dataset do
      begin
        First;
        while not Eof do
        begin
          cb.Items.AddObject(
            FieldByName('NOMBRECOMPLETO').AsString,
            TObject(FieldByName('Id').AsInteger));
          Next;
        end;
      end;
      if _Resultado = -1 then
        raise Exception.Create('');
      mDL_TB_Clientes.Destroy;

      _Resultado := 1;
    except
      if _Resultado = -1 then
      begin
        Application.MessageBox(PChar('Ha ocurrido un error' + #13+#10 + _ErrorM),
          'Error', MB_ICONERROR);
      end;
      if _Resultado = 0 then
      begin
        Application.MessageBox(PChar(_ErrorM),
          'Advertencia', MB_ICONWARNING);
      end;
      _Resultado := -1;
    end;

  end;
end;
{$ENDREGION}

end.
