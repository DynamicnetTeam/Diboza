unit uReportBuild;

interface
uses
  FireDAC.Comp.Client, System.IniFiles, TypInfo, Data.DB,
  System.Classes, SysUtils, Vcl.Dialogs, FireDAC.Comp.DataSet,
  FireDAC.Stan.Intf;

type
  TReportBuild = class
    ArchivoConfig: string;
  private
    FPathAplicacion: string;
    FPrecargar: Integer;
    FContenidoPre: string;
    FReporteActual: string;
    FConexionPre: string;
    FOrigenPre: Integer;
    FUsarConexionPre: Integer;
    procedure SetPathAplicacion(pValor: string);
    procedure SetPrecargar(pValor: Integer);
    procedure SetContenidoPre(pValor: string);
    procedure SetReporteActual(pValor: string);
    procedure SetConexionPre(pValor: string);
    procedure SetOrigenPre(pValor: Integer);
    procedure SetUsarConexionPre(pValor: Integer);
    function Obtener_LineaCampos(ds: TFDMemTable): TStringList;
  public
    property PathAplicacion: string read FPathAplicacion write SetPathAplicacion;
    property Precargar: Integer read FPrecargar write SetPrecargar;
    property ContenidoPre: string read FContenidoPre write SetContenidoPre;
    property ReporteActual: string read FReporteActual write SetReporteActual;
    property ConexionPre: string read FConexionPre write SetConexionPre;
    property OrigenPre: Integer read FOrigenPre write SetOrigenPre;
    property UsarConexionPre: Integer read FUsarConexionPre write SetUsarConexionPre;
    constructor Create(pPathAplicacion: string; pPrecargar: Boolean = False);
    procedure GenerarEstructura(d1: TFDMemTable; d2: TFDMemTable;
      d3: TFDMemTable; d4: TFDMemTable; d5: TFDMemTable;
      d6: TFDMemTable; d7: TFDMemTable; d8: TFDMemTable);
    procedure ExportarDatos(d1: TFDMemTable; d2: TFDMemTable;
      d3: TFDMemTable; d4: TFDMemTable; d5: TFDMemTable;
      d6: TFDMemTable; d7: TFDMemTable; d8: TFDMemTable);
  end;

implementation

{ TCReportBuild }

constructor TReportBuild.Create(pPathAplicacion: string; pPrecargar: Boolean);
begin
  PathAplicacion := pPathAplicacion;
{  if pPrecargar = True then
    Precargar := 1;
  if pPrecargar = False then
    Precargar := 0;   }
end;

procedure TReportBuild.SetPathAplicacion(pValor: string);
var
  myConfig: TIniFile;
  mArchivoNombre: string;
begin
  FPathAplicacion := pValor;
  mArchivoNombre := FPathAplicacion + '\Config_ReportBuild.ini';
  myConfig := TIniFile.Create(mArchivoNombre);
  myConfig.WriteString('General', 'PathAplicacion', FPathAplicacion);
  myConfig.Free;
end;

procedure TReportBuild.SetPrecargar(pValor: Integer);
var
  myConfig: TIniFile;
begin
  FPrecargar := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteInteger('General', 'Precargar', FPrecargar);
  myConfig.Free;
end;

procedure TReportBuild.SetContenidoPre(pValor: string);
var
  myConfig: TIniFile;
begin
  FContenidoPre := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteString('ReportePre', 'ContenidoPre', FContenidoPre);
  myConfig.Free;
end;

procedure TReportBuild.SetReporteActual(pValor: string);
var
  myConfig: TIniFile;
begin
  FReporteActual := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteString('ReportePre', 'ReporteActual', FReporteActual);
  myConfig.Free;
end;

procedure TReportBuild.SetConexionPre(pValor: string);
var
  myConfig: TIniFile;
begin
  FConexionPre := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteString('ReportePre', 'ConexionPre', FConexionPre);
  myConfig.Free;
end;

procedure TReportBuild.SetOrigenPre(pValor: Integer);
var
  myConfig: TIniFile;
begin
  FOrigenPre := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteInteger('ReportePre', 'OrigenPre', FOrigenPre);
  myConfig.Free;
end;

procedure TReportBuild.SetUsarConexionPre(pValor: Integer);
var
  myConfig: TIniFile;
begin
  FUsarConexionPre := pValor;
  myConfig := TIniFile.Create(ArchivoConfig);
  myConfig.WriteInteger('ReportePre', 'UsarConexionPre', FUsarConexionPre);
  myConfig.Free;
end;

procedure TReportBuild.GenerarEstructura(d1, d2, d3, d4, d5, d6, d7,
  d8: TFDMemTable);
var
  myConfig: TIniFile;
  mLista1: TStringList;
  mFila: Integer;
begin
  myConfig := TIniFile.Create(ArchivoConfig);

  if d1 <> nil then
  begin
    myConfig.EraseSection('DataSet1Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d1);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet1Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d2 <> nil then
  begin
    myConfig.EraseSection('DataSet2Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d2);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet2Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d3 <> nil then
  begin
    myConfig.EraseSection('DataSet3Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d3);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet3Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d4 <> nil then
  begin
    myConfig.EraseSection('DataSet4Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d4);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet4Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d5 <> nil then
  begin
    myConfig.EraseSection('DataSet5Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d5);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet5Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d6 <> nil then
  begin
    myConfig.EraseSection('DataSet6Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d6);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet6Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d7 <> nil then
  begin
    myConfig.EraseSection('DataSet7Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d7);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet7Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  if d8 <> nil then
  begin
    myConfig.EraseSection('DataSet8Campos');
    mLista1 := TStringList.Create;
    mLista1 := Obtener_LineaCampos(d8);
    for mFila := 0 to mLista1.Count - 1 do
      myConfig.WriteString('DataSet8Campos',
        'Campo' + IntToStr(mFila + 1), mLista1.Strings[mFila]);
    mLista1.Free;
  end;

  myConfig.Free;
end;

procedure TReportBuild.ExportarDatos(d1, d2, d3, d4, d5, d6, d7,
  d8: TFDMemTable);
begin
  if d1 <> nil then
  begin
    d1.SaveToFile('DataSet1.xml', TFDStorageFormat.sfXML);
  end;
  if d2 <> nil then
  begin
    d2.SaveToFile('DataSet2.xml', TFDStorageFormat.sfXML);
  end;
  if d3 <> nil then
  begin
    d3.SaveToFile('DataSet3.xml', TFDStorageFormat.sfXML);
  end;
  if d4 <> nil then
  begin
    d4.SaveToFile('DataSet4.xml', TFDStorageFormat.sfXML);
  end;
  if d5 <> nil then
  begin
    d5.SaveToFile('DataSet5.xml', TFDStorageFormat.sfXML);
  end;
  if d6 <> nil then
  begin
    d6.SaveToFile('DataSet6.xml', TFDStorageFormat.sfXML);
  end;
  if d7 <> nil then
  begin
    d7.SaveToFile('DataSet7.xml', TFDStorageFormat.sfXML);
  end;
  if d8 <> nil then
  begin
    d8.SaveToFile('DataSet8.xml', TFDStorageFormat.sfXML);
  end;
end;

function TReportBuild.Obtener_LineaCampos(ds: TFDMemTable): TStringList;
var
  mColumnas: Integer;
  mNombre, mTipo, mSize: string;
  mResultado: TStringList;
begin
  mResultado := TStringList.Create;

  with ds do
  begin
    for mColumnas := 0 to FieldDefs.Count - 1 do
    begin
      mNombre := FieldDefs.Items[mColumnas].Name;
      try
        mTipo := GetEnumName(TypeInfo(TFieldType), Integer(Fields[mColumnas].DataType));
      except
        mTipo := '';
      end;
      mSize := IntToStr(FieldDefs.Items[mColumnas].Size);
      mResultado.Add(mNombre + ',' + mTipo + ',' + mSize);
    end;
  end;

  Result := mResultado;
end;

end.
