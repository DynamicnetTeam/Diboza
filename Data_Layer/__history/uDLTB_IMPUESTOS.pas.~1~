unit uDL_TB_CLIENTES;

interface
uses udmObjects, FireDAC.Comp.Client, System.SysUtils, Data.DB,
  System.Classes;

type
  TDatasetMem = TFDMemTable;

  TDL_TB_CLIENTES = class
    Dataset: TDatasetMem;
    _ListaCampos: TStringList;
  const
    Tabla = 'TB_CLIENTES';
    ClaseNombre = 'TDL_TB_CLIENTES';
  public
    {$REGION 'Metodos'}
    constructor Create;
    destructor Destroy;
    procedure Consultar(var pResultado: Integer; var pErrorM: string;
      pWhere: string =''; pOrderBy: string ='';
      pGroupBy: string =''; pHaving: string =''; pSelect: string ='';
      pds1: TDatasetMem = nil);
    procedure Insertar(var pResultado: Integer; var pErrorM: string);
    procedure Modificar(pWhere: string; var pResultado: Integer;
      var pErrorM: string);
    procedure Eliminar(pWhere: string; var pResultado: Integer;
      var pErrorM: string);
    procedure Limpiar_Tag;
    function Existe_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string): Boolean;
    function Obtener_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string): Integer;
    function Existe_Campo(pWhere: string;
      pCampo: string; pResultado: Integer;
      var pErrorM: string): Boolean;
    function Obtener_Valor(pWhere: string;
      pCampo: string; var pResultado: Integer;
      var pErrorM: string): Variant;
    procedure Actualizar_Campo(pWhere: string;
      pCampo: string; pValor: Variant; var pResultado: Integer;
      var pErrorM: string);
    {$ENDREGION}
  end;


implementation

{ TDL_TB_CLIENTES}

{$REGION 'Metodos'}
constructor TDL_TB_CLIENTES.Create;
begin
  Dataset := TDatasetMem.Create(nil);
  with Dataset do
  begin
    FileName := 'TB_CLIENTES';
    FieldDefs.Clear;
    FieldDefs.Add('ID', ftInteger, 0);
    FieldDefs.Add('CODIGO', ftString, 100);
    FieldDefs.Add('FECHAALTA', ftDate, 0);
    FieldDefs.Add('NOMBRE', ftString, 50);
    FieldDefs.Add('APELLIDO1', ftString, 50);
    FieldDefs.Add('APELLIDO2', ftString, 50);
    FieldDefs.Add('NOMBRECOMPLETO', ftString, 160);
    FieldDefs.Add('CODIGOPOSTAL', ftString, 25);
    FieldDefs.Add('DIRECCION', ftString, 255);
    FieldDefs.Add('EMAIL', ftString, 100);
    FieldDefs.Add('TELEFONO1', ftString, 17);
    FieldDefs.Add('TELEFONO2', ftString, 17);
    FieldDefs.Add('WEB', ftString, 100);
    FieldDefs.Add('NOMBREIMPRIMIR', ftString, 160);
    FieldDefs.Add('CEDULA', ftString, 30);
    FieldDefs.Add('IMAGEN1', ftBlob, 0);
    FieldDefs.Add('NOMBREARCHIVO', ftString, 255);
    FieldDefs.Add('FECHANACIMIENTO', ftDate, 0);
    FieldDefs.Add('SALDO', ftSingle, 0);
    FieldDefs.Add('LIMITECREDITO', ftSingle, 0);
    FieldDefs.Add('APLICARLIMITECREDITO', ftInteger, 0);
    FieldDefs.Add('TIPO', ftInteger, 0);
    FieldDefs.Add('PRECIOVENTAPORCENTAJE', ftSingle, 0);
    FieldDefs.Add('CONTACTONOMBRE', ftString, 255);
    FieldDefs.Add('TIPOPAGO', ftInteger, 0);
    FieldDefs.Add('PLAZO', ftInteger, 0);
    CreateDataSet;
    Open;
  end;

  _ListaCampos := TStringList.Create;
end;

destructor TDL_TB_CLIENTES.Destroy;
begin
  Dataset.Close;
  Dataset.Free;
  _ListaCampos.Free;
end;

procedure TDL_TB_CLIENTES.Consultar(var pResultado: Integer;
  var pErrorM: string; pWhere, pOrderBy, pGroupBy, pHaving,
  pSelect: string; pds1: TDatasetMem);
var
  mWhere, mOrderBy, mGroupBy, mHaving, mSelect: string;
begin
  if Trim(pWhere) <> '' then
    mWhere :='Where '+ pWhere;
  if Trim(pOrderBy) <> '' then
    mOrderBy :='Order By  '+ pOrderBy;
  if Trim(pGroupBy) <> '' then
    mGroupBy :='Group By  '+ pGroupBy;
  if Trim(pHaving) <> '' then
    mHaving :='Having  '+ pHaving;
  if Trim(pSelect) <> '' then
    mSelect :='Select  '+ pSelect;
  if Trim(pSelect) = '' then
    dmObjects.DB_TB_CLIENTES_Consultar(dmObjects.FDQuery1, Dataset,
      mWhere, mOrderBy, mGroupBy, mHaving, Tabla, ClaseNombre,pResultado, pErrorM)
  else
    dmObjects.DB_Consultar_Generico(dmObjects.FDQuery1, pds1,
      pWhere, pOrderBy, pGroupBy, pHaving, pSelect, _ListaCampos,
      pResultado, pErrorM);
end;

procedure TDL_TB_CLIENTES.Insertar(var pResultado: Integer; var pErrorM: string);
begin
  dmObjects.DB_TB_CLIENTES_Insertar(dmObjects.FDQuery1, Dataset, ClaseNombre,
    pResultado, pErrorM);
end;

procedure TDL_TB_CLIENTES.Modificar(pWhere: string; var pResultado: Integer;
  var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_CLIENTES_Modificar(dmObjects.FDQuery1, Dataset, mWhere,
    ClaseNombre, pResultado, pErrorM);
end;

procedure TDL_TB_CLIENTES.Eliminar(pWhere: string; var pResultado: Integer;
  var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_CLIENTES_Eliminar(dmObjects.FDQuery1, mWhere, Tabla, ClaseNombre,
    pResultado, pErrorM);
end;

procedure TDL_TB_CLIENTES.Limpiar_Tag;
begin
  dmObjects.DB_Limpiar_Tag(Dataset);
end;

function TDL_TB_CLIENTES.Existe_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string): Boolean;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_CLIENTES_Existe_Id(dmObjects.FDQuery1, mWhere, Tabla,
      ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_CLIENTES.Obtener_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string): Integer;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_CLIENTES_Obtener_Id(dmObjects.FDQuery1, mWhere, Tabla,
      ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_CLIENTES.Existe_Campo(pWhere, pCampo: string; pResultado: Integer;
  var pErrorM: string): Boolean;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_CLIENTES_Existe_Campo(dmObjects.FDQuery1, mWhere, Tabla,
      pCampo, ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_CLIENTES.Obtener_Valor(pWhere, pCampo: string;
  var pResultado: Integer; var pErrorM: string): Variant;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_CLIENTES_Obtener_Valor(dmObjects.FDQuery1, mWhere, Tabla,
      pCampo, ClaseNombre, pResultado, pErrorM);
end;

procedure TDL_TB_CLIENTES.Actualizar_Campo(pWhere, pCampo: string; pValor: Variant;
  var pResultado: Integer; var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_CLIENTES_Actualizar_Campo(dmObjects.FDQuery1, mWhere, Tabla,
    pCampo, pValor, ClaseNombre, pResultado, pErrorM);
end;
{$ENDREGION}

end.

unit uDL_TB_IMPUESTOS;

interface
uses udmObjects, FireDAC.Comp.Client, System.SysUtils, Data.DB,
  System.Classes;

type
  TDatasetMem = TFDMemTable;

  TDL_TB_IMPUESTOS = class
    Dataset: TDatasetMem;
    _ListaCampos: TStringList;
  const
    Tabla = 'TB_IMPUESTOS';
    ClaseNombre = 'TDL_TB_IMPUESTOS';
  public
    {$REGION 'Metodos'}
    constructor Create;
    destructor Destroy;
    procedure Consultar(var pResultado: Integer; var pErrorM: string;
      pWhere: string =''; pOrderBy: string ='';
      pGroupBy: string =''; pHaving: string =''; pSelect: string ='';
      pds1: TDatasetMem = nil);
    procedure Insertar(var pResultado: Integer; var pErrorM: string);
    procedure Modificar(pWhere: string; var pResultado: Integer;
      var pErrorM: string);
    procedure Eliminar(pWhere: string; var pResultado: Integer;
      var pErrorM: string);
    procedure Limpiar_Tag;
    function Existe_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string): Boolean;
    function Obtener_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string): Integer;
    function Existe_Campo(pWhere: string;
      pCampo: string; pResultado: Integer;
      var pErrorM: string): Boolean;
    function Obtener_Valor(pWhere: string;
      pCampo: string; var pResultado: Integer;
      var pErrorM: string): Variant;
    procedure Actualizar_Campo(pWhere: string;
      pCampo: string; pValor: Variant; var pResultado: Integer;
      var pErrorM: string);
    {$ENDREGION}
  end;


implementation

{ TDL_TB_IMPUESTOS}

{$REGION 'Metodos'}
constructor TDL_TB_IMPUESTOS.Create;
begin
  Dataset := TDatasetMem.Create(nil);
  with Dataset do
  begin
    FileName := 'TB_IMPUESTOS';
    FieldDefs.Clear;
    FieldDefs.Add('ID', ftInteger, 0);
    FieldDefs.Add('NOMBRE', ftString, 100);
    FieldDefs.Add('PORCENTAJE', ftSingle, 0);
    CreateDataSet;
    Open;
  end;

  _ListaCampos := TStringList.Create;
end;

destructor TDL_TB_IMPUESTOS.Destroy;
begin
  Dataset.Close;
  Dataset.Free;
  _ListaCampos.Free;
end;

procedure TDL_TB_IMPUESTOS.Consultar(var pResultado: Integer;
  var pErrorM: string; pWhere, pOrderBy, pGroupBy, pHaving,
  pSelect: string; pds1: TDatasetMem);
var
  mWhere, mOrderBy, mGroupBy, mHaving, mSelect: string;
begin
  if Trim(pWhere) <> '' then
    mWhere :='Where '+ pWhere;
  if Trim(pOrderBy) <> '' then
    mOrderBy :='Order By  '+ pOrderBy;
  if Trim(pGroupBy) <> '' then
    mGroupBy :='Group By  '+ pGroupBy;
  if Trim(pHaving) <> '' then
    mHaving :='Having  '+ pHaving;
  if Trim(pSelect) <> '' then
    mSelect :='Select  '+ pSelect;
  if Trim(pSelect) = '' then
    dmObjects.DB_TB_IMPUESTOS_Consultar(dmObjects.FDQuery1, Dataset,
      mWhere, mOrderBy, mGroupBy, mHaving, Tabla, ClaseNombre,pResultado, pErrorM)
  else
    dmObjects.DB_Consultar_Generico(dmObjects.FDQuery1, pds1,
      pWhere, pOrderBy, pGroupBy, pHaving, pSelect, _ListaCampos,
      pResultado, pErrorM);
end;

procedure TDL_TB_IMPUESTOS.Insertar(var pResultado: Integer; var pErrorM: string);
begin
  dmObjects.DB_TB_IMPUESTOS_Insertar(dmObjects.FDQuery1, Dataset, ClaseNombre,
    pResultado, pErrorM);
end;

procedure TDL_TB_IMPUESTOS.Modificar(pWhere: string; var pResultado: Integer;
  var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_IMPUESTOS_Modificar(dmObjects.FDQuery1, Dataset, mWhere,
    ClaseNombre, pResultado, pErrorM);
end;

procedure TDL_TB_IMPUESTOS.Eliminar(pWhere: string; var pResultado: Integer;
  var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_IMPUESTOS_Eliminar(dmObjects.FDQuery1, mWhere, Tabla, ClaseNombre,
    pResultado, pErrorM);
end;

procedure TDL_TB_IMPUESTOS.Limpiar_Tag;
begin
  dmObjects.DB_Limpiar_Tag(Dataset);
end;

function TDL_TB_IMPUESTOS.Existe_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string): Boolean;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_IMPUESTOS_Existe_Id(dmObjects.FDQuery1, mWhere, Tabla,
      ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_IMPUESTOS.Obtener_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string): Integer;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_IMPUESTOS_Obtener_Id(dmObjects.FDQuery1, mWhere, Tabla,
      ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_IMPUESTOS.Existe_Campo(pWhere, pCampo: string; pResultado: Integer;
  var pErrorM: string): Boolean;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_IMPUESTOS_Existe_Campo(dmObjects.FDQuery1, mWhere, Tabla,
      pCampo, ClaseNombre, pResultado, pErrorM);
end;

function TDL_TB_IMPUESTOS.Obtener_Valor(pWhere, pCampo: string;
  var pResultado: Integer; var pErrorM: string): Variant;
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  Result :=
    dmObjects.DB_TB_IMPUESTOS_Obtener_Valor(dmObjects.FDQuery1, mWhere, Tabla,
      pCampo, ClaseNombre, pResultado, pErrorM);
end;

procedure TDL_TB_IMPUESTOS.Actualizar_Campo(pWhere, pCampo: string; pValor: Variant;
  var pResultado: Integer; var pErrorM: string);
var
  mWhere: string;
begin
  if Trim(pWhere) <> '' then
    mWhere := 'Where '+ pWhere;
  dmObjects.DB_TB_IMPUESTOS_Actualizar_Campo(dmObjects.FDQuery1, mWhere, Tabla,
    pCampo, pValor, ClaseNombre, pResultado, pErrorM);
end;
{$ENDREGION}

end.

