unit uDL_TB_CONEXIONES;

interface
uses udmObjects, FireDAC.Comp.Client, System.SysUtils, Data.DB,
  System.Classes, udmConnection;

type
  TDatasetMem = TFDMemTable;

  TDL_TB_CONEXIONES = class
    Dataset: TDatasetMem;
    _ListaCampos: TStringList;
  const
    Tabla = 'TB_CONEXIONES';
    ClaseNombre = 'TDL_TB_CONEXIONES';
  public
    {$REGION 'Metodos'}
    constructor Create;
    destructor Destroy;
    procedure Consultar(var pResultado: Integer; var pErrorM: string;
      pWhere: string =''; pOrderBy: string ='';
      pGroupBy: string =''; pHaving: string =''; pSelect: string ='';
      pds1: TDatasetMem = nil; FTypeConection: TTypeConection = udmConnection.Main);
    procedure Insertar(var pResultado: Integer; var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main);
    procedure Modificar(pWhere: string; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main);
    procedure Eliminar(pWhere: string; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main);
    procedure Limpiar_Tag;
    function Existe_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main): Boolean;
    function Obtener_Id(pWhere: string; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main): Integer;
    function Existe_Campo(pWhere: string;
      pCampo: string; pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main): Boolean;
    function Obtener_Valor(pWhere: string;
      pCampo: string; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main): Variant;
    procedure Actualizar_Campo(pWhere: string;
      pCampo: string; pValor: Variant; var pResultado: Integer;
      var pErrorM: string; FTypeConection: TTypeConection = udmConnection.Main);
    {$ENDREGION}
  end;

implementation

{ TDL_TB_CONEXIONES }

{$REGION 'Metodos'}
procedure TDL_TB_CONEXIONES.Actualizar_Campo(pWhere, pCampo: string;
  pValor: Variant; var pResultado: Integer; var pErrorM: string;
  FTypeConection: TTypeConection);
begin

end;

procedure TDL_TB_CONEXIONES.Consultar(var pResultado: Integer;
  var pErrorM: string; pWhere, pOrderBy, pGroupBy, pHaving, pSelect: string;
  pds1: TDatasetMem; FTypeConection: TTypeConection);
begin

end;

constructor TDL_TB_CONEXIONES.Create;
begin

end;

destructor TDL_TB_CONEXIONES.Destroy;
begin

end;

procedure TDL_TB_CONEXIONES.Eliminar(pWhere: string; var pResultado: Integer;
  var pErrorM: string; FTypeConection: TTypeConection);
begin

end;

function TDL_TB_CONEXIONES.Existe_Campo(pWhere, pCampo: string;
  pResultado: Integer; var pErrorM: string;
  FTypeConection: TTypeConection): Boolean;
begin

end;

function TDL_TB_CONEXIONES.Existe_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string; FTypeConection: TTypeConection): Boolean;
begin

end;

procedure TDL_TB_CONEXIONES.Insertar(var pResultado: Integer;
  var pErrorM: string; FTypeConection: TTypeConection);
begin

end;

procedure TDL_TB_CONEXIONES.Limpiar_Tag;
begin

end;

procedure TDL_TB_CONEXIONES.Modificar(pWhere: string; var pResultado: Integer;
  var pErrorM: string; FTypeConection: TTypeConection);
begin

end;

function TDL_TB_CONEXIONES.Obtener_Id(pWhere: string; var pResultado: Integer;
  var pErrorM: string; FTypeConection: TTypeConection): Integer;
begin

end;

function TDL_TB_CONEXIONES.Obtener_Valor(pWhere, pCampo: string;
  var pResultado: Integer; var pErrorM: string;
  FTypeConection: TTypeConection): Variant;
begin

end;
{$ENDREGION}

end.
